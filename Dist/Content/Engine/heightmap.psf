#include <Psybrus.psh>
#include <PsybrusLighting.psh>

#include <UniformHeightmap.psh>
#include <UniformLight.psh>
#include <UniformMaterial.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float2, InPosition_, POSITION );
	DECLARE_IN( float2, InTexCoord_, TEXCOORD0 );
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float3, VsNormal, NORMAL );
	DECLARE_OUT( float2, VsTexCoord0, TEXCOORD0 );
	DECLARE_OUT( float, VsHeight, TEXCOORD1 );
VS_OUT_END

PSY_SAMPLER_2D( HeightTex );

VS_MAIN( vertexMain )
{
	VS_ENTER;
	float4 WorldPosition;

	float2 InFlatPosition = ( IN( InPosition_ ) * HeightmapDimensions_ ) + float2( 0.0, HeightmapPositionOffset_ );
	float2 InTexCoord = IN( InTexCoord_ ).xy + float2( 0.0, HeightmapUVOffset_ );

	float4 InPosition = float4( InFlatPosition.x, 0.0, InFlatPosition.y, 1.0 );

	float Height = PSY_SAMPLE_2D_LOD( HeightTex, InTexCoord.xy, 0.0 ).x;
	InPosition.y = Height * HeightmapHeight_ + HeightmapOffset_;
	OUT( VsHeight ) = Height * HeightmapHeight_;

	PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, InPosition );
	PSY_MAKE_CLIP_SPACE_VERTEX( OUT_POSITION, WorldPosition );

	float4 Normal;
	float4 InNormal = float4( 0.0, 1.0, 0.0, 0.0 );
	
	float Scale = HeightmapHeight_ / HeightmapDimensions_;
	float HeightL = PSY_SAMPLE_2D_LOD( HeightTex, InTexCoord + float2( -HeightmapUVScale_.x, 0.0 ), 0 ).x;
	float HeightR = PSY_SAMPLE_2D_LOD( HeightTex, InTexCoord + float2(  HeightmapUVScale_.x, 0.0 ), 0 ).x;
	float HeightB = PSY_SAMPLE_2D_LOD( HeightTex, InTexCoord + float2( 0.0, -HeightmapUVScale_.x ), 0 ).x;
	float HeightT = PSY_SAMPLE_2D_LOD( HeightTex, InTexCoord + float2( 0.0,  HeightmapUVScale_.x ), 0 ).x;

	InNormal.x = ( ( Height - HeightR ) + ( HeightL - Height ) ) * Scale;
	InNormal.y = HeightmapNormalTweak_;
	InNormal.z = ( ( Height - HeightT ) + ( HeightB - Height ) ) * Scale;
	InNormal.xyz = normalize( InNormal.xyz );

	PSY_MAKE_WORLD_SPACE_NORMAL( Normal, InNormal );
	OUT( VsNormal ) = Normal.xyz;

	OUT( VsTexCoord0 ) = InTexCoord.xy;

	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float3, VsNormal, NORMAL );
	DECLARE_IN( float2, VsTexCoord0, TEXCOORD0 );
	DECLARE_IN( float, VsHeight, TEXCOORD1 );
PS_IN_END
#include <PsybrusOutput.psh>

//////////////////////////////////////////////////////////////////////////
// Samplers
PSY_SAMPLER_CUBE( ReflectionTex );

PSY_SAMPLER_2D( Layer0Tex );
PSY_SAMPLER_2D( Layer1Tex );
PSY_SAMPLER_2D( Layer2Tex );
PSY_SAMPLER_2D( Layer3Tex );

PSY_SAMPLER_2D( Layer0MatTex );
PSY_SAMPLER_2D( Layer1MatTex );
PSY_SAMPLER_2D( Layer2MatTex );
PSY_SAMPLER_2D( Layer3MatTex );

PSY_SAMPLER_2D( NoiseTex );

//////////////////////////////////////////////////////////////////////////
// pixelAll
void pixelAll( FRAMEBUFFER_INPUT )
{
	float TexScale = 16.0;

	float4 Layer0 = PSY_SAMPLE_2D( Layer0Tex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer1 = PSY_SAMPLE_2D( Layer1Tex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer2 = PSY_SAMPLE_2D( Layer2Tex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer3 = PSY_SAMPLE_2D( Layer3Tex, IN( VsTexCoord0 ).xy * TexScale * 4.0 );

	float4 Layer1Mat = PSY_SAMPLE_2D( Layer1MatTex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer2Mat = PSY_SAMPLE_2D( Layer2MatTex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer3Mat = PSY_SAMPLE_2D( Layer3MatTex, IN( VsTexCoord0 ).xy * TexScale );
	float4 Layer0Mat = PSY_SAMPLE_2D( Layer0MatTex, IN( VsTexCoord0 ).xy * TexScale * 4.0 );

	float4 Noise = PSY_SAMPLE_2D( NoiseTex, IN( VsTexCoord0 ).xy * 4.0 ) - 0.5;
	float NoiseMultiplier = 4.0;

	float3 Normal = normalize( IN( VsNormal ) );

	float Height = IN( VsHeight );

	float Layer0Height = HeightmapLayer0Height_ + Noise.x * NoiseMultiplier;
	float Layer1Height = HeightmapLayer1Height_ + Noise.x * NoiseMultiplier;
	float Layer2Height = HeightmapLayer2Height_ + Noise.x * NoiseMultiplier;
	float Layer3Height = HeightmapLayer3Height_ + Noise.x * NoiseMultiplier;

	float Layer0Blend = clamp( Height, 0.0, Layer0Height ) / Layer0Height;
	float Layer1Blend = clamp( Height, Layer1Height, Layer1Height + 1.0 ) - Layer1Height;
	float Layer2Blend = clamp( Height, Layer2Height, Layer2Height + 1.0 ) - Layer2Height;
	float Layer3Blend = clamp( Height, Layer3Height, Layer3Height + 1.0 ) - Layer3Height;

	float3 Diffuse = float3( 0.0, 0.0, 0.0 );
	Diffuse = lerp( Diffuse, Layer0.xyz, Layer0Blend );
	Diffuse = lerp( Diffuse, Layer1.xyz, Layer1Blend );
	Diffuse = lerp( Diffuse, Layer2.xyz, Layer2Blend );
	Diffuse = lerp( Diffuse, Layer3.xyz, Layer3Blend );

	float3 MatTex = float3( 0.0, 0.0, 0.0 );
	MatTex = lerp( MatTex, Layer0Mat.xyz, Layer0Blend );
	MatTex = lerp( MatTex, Layer1Mat.xyz, Layer1Blend );
	MatTex = lerp( MatTex, Layer2Mat.xyz, Layer2Blend );
	MatTex = lerp( MatTex, Layer3Mat.xyz, Layer3Blend );

	Material InMaterial;
	InMaterial.Colour_ = Diffuse;
	InMaterial.Metallic_ = MatTex.x;
	InMaterial.Specular_ = MatTex.y;
	InMaterial.Roughness_ = MatTex.z;

	writeFrag( FRAMEBUFFER_INTERNAL, float4( InMaterial.Colour_, 1.0 ), Normal.xyz, float3( InMaterial.Metallic_, InMaterial.Specular_, InMaterial.Roughness_ ) );
}

//////////////////////////////////////////////////////////////////////////
// pixelMain
PS_MAIN( pixelMain )
{
	PS_ENTER;
	pixelAll( FRAMEBUFFER_OUTPUT );
	PS_EXIT;
}

#endif
